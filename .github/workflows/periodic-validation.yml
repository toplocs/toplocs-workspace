name: Periodic Context Validation

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        type: boolean
        default: false

jobs:
  validate-context:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install -g @octokit/cli

    - name: Check repository accessibility
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking repository accessibility..."
        
        repositories=(
          "toplocs/tribelike"
          "toplocs/locations"
          "toplocs/event-plugin"
          "toplocs/wiki-plugin"
          "toplocs/location-plugin"
          "toplocs/link-plugin"
          "toplocs/demo-plugin"
          "toplocs/tribelike.wiki"
        )
        
        accessible_repos=()
        inaccessible_repos=()
        
        for repo in "${repositories[@]}"; do
          if gh repo view "$repo" &> /dev/null; then
            accessible_repos+=("$repo")
            echo "‚úÖ $repo - accessible"
          else
            inaccessible_repos+=("$repo")
            echo "‚ùå $repo - not accessible"
          fi
        done
        
        echo "ACCESSIBLE_REPOS=$(IFS=,; echo "${accessible_repos[*]}")" >> $GITHUB_ENV
        echo "INACCESSIBLE_REPOS=$(IFS=,; echo "${inaccessible_repos[*]}")" >> $GITHUB_ENV

    - name: Validate documentation links
      run: |
        echo "üîó Validating documentation links..."
        
        # Check if all repository links in documentation are valid
        invalid_links=()
        
        # Check CLAUDE.md for repository references
        if [ -f CLAUDE.md ]; then
          while IFS= read -r line; do
            if [[ $line =~ github\.com/toplocs/([a-zA-Z0-9-]+) ]]; then
              repo_name="${BASH_REMATCH[1]}"
              if ! gh repo view "toplocs/$repo_name" &> /dev/null; then
                invalid_links+=("toplocs/$repo_name")
              fi
            fi
          done < CLAUDE.md
        fi
        
        # Check getting-started.md
        if [ -f docs/getting-started.md ]; then
          while IFS= read -r line; do
            if [[ $line =~ github\.com/toplocs/([a-zA-Z0-9-]+) ]]; then
              repo_name="${BASH_REMATCH[1]}"
              if ! gh repo view "toplocs/$repo_name" &> /dev/null; then
                invalid_links+=("toplocs/$repo_name")
              fi
            fi
          done < docs/getting-started.md
        fi
        
        if [ ${#invalid_links[@]} -gt 0 ]; then
          echo "INVALID_LINKS=$(IFS=,; echo "${invalid_links[*]}")" >> $GITHUB_ENV
          echo "‚ùå Found invalid repository links: ${invalid_links[*]}"
        else
          echo "‚úÖ All repository links are valid"
          echo "INVALID_LINKS=" >> $GITHUB_ENV
        fi

    - name: Check for new repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking for new TopLocs repositories..."
        
        # Get all repositories in the toplocs organization
        all_repos=$(gh repo list toplocs --limit 100 --json name --jq '.[].name')
        
        # Current documented repositories
        documented_repos=(
          "tribelike"
          "locations"
          "event-plugin"
          "wiki-plugin"
          "location-plugin"
          "link-plugin"
          "demo-plugin"
          "tribelike.wiki"
          "toplocs-workspace"
        )
        
        # Playground repositories to ignore
        playground_repos=(
          "gun-sign"
          "gun-playground"
          "decentral-auth"
          "project-playground"
        )
        
        # Find undocumented repositories (excluding playground repos)
        new_repos=()
        while IFS= read -r repo; do
          # Skip if repo is in documented list
          if [[ " ${documented_repos[*]} " =~ " $repo " ]]; then
            continue
          fi
          
          # Skip if repo is a playground repo
          if [[ " ${playground_repos[*]} " =~ " $repo " ]]; then
            continue
          fi
          
          new_repos+=("$repo")
        done <<< "$all_repos"
        
        if [ ${#new_repos[@]} -gt 0 ]; then
          echo "NEW_REPOS=$(IFS=,; echo "${new_repos[*]}")" >> $GITHUB_ENV
          echo "üì¶ Found new repositories: ${new_repos[*]}"
        else
          echo "‚úÖ No new repositories found"
          echo "NEW_REPOS=" >> $GITHUB_ENV
        fi

    - name: Check repository activity
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üìä Checking recent repository activity..."
        
        # Check for repositories with recent activity (last 7 days)
        active_repos=()
        cutoff_date=$(date -d '7 days ago' --iso-8601)
        
        IFS=',' read -ra repos <<< "$ACCESSIBLE_REPOS"
        for repo in "${repos[@]}"; do
          if [ -n "$repo" ]; then
            last_commit=$(gh repo view "$repo" --json pushedAt --jq '.pushedAt')
            if [[ "$last_commit" > "$cutoff_date" ]]; then
              active_repos+=("$repo")
            fi
          fi
        done
        
        echo "ACTIVE_REPOS=$(IFS=,; echo "${active_repos[*]}")" >> $GITHUB_ENV
        echo "üî• Recently active repositories: ${active_repos[*]}"

    - name: Generate validation report
      run: |
        cat > validation_report.md << 'EOF'
        # ü§ñ Periodic Context Validation Report
        
        **Validation Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Trigger**: ${{ github.event_name }}
        
        ## Repository Status
        
        ### ‚úÖ Accessible Repositories
        EOF
        
        if [ -n "$ACCESSIBLE_REPOS" ]; then
          IFS=',' read -ra repos <<< "$ACCESSIBLE_REPOS"
          for repo in "${repos[@]}"; do
            if [ -n "$repo" ]; then
              echo "- $repo" >> validation_report.md
            fi
          done
        fi
        
        echo "" >> validation_report.md
        echo "### ‚ùå Inaccessible Repositories" >> validation_report.md
        
        if [ -n "$INACCESSIBLE_REPOS" ]; then
          IFS=',' read -ra repos <<< "$INACCESSIBLE_REPOS"
          for repo in "${repos[@]}"; do
            if [ -n "$repo" ]; then
              echo "- $repo" >> validation_report.md
            fi
          done
        else
          echo "*None*" >> validation_report.md
        fi
        
        echo "" >> validation_report.md
        echo "### üì¶ New Repositories Found" >> validation_report.md
        
        if [ -n "$NEW_REPOS" ]; then
          IFS=',' read -ra repos <<< "$NEW_REPOS"
          for repo in "${repos[@]}"; do
            if [ -n "$repo" ]; then
              echo "- $repo" >> validation_report.md
            fi
          done
        else
          echo "*None*" >> validation_report.md
        fi
        
        echo "" >> validation_report.md
        echo "### üî• Recently Active Repositories" >> validation_report.md
        
        if [ -n "$ACTIVE_REPOS" ]; then
          IFS=',' read -ra repos <<< "$ACTIVE_REPOS"
          for repo in "${repos[@]}"; do
            if [ -n "$repo" ]; then
              echo "- $repo" >> validation_report.md
            fi
          done
        else
          echo "*None*" >> validation_report.md
        fi
        
        echo "" >> validation_report.md
        echo "### üîó Documentation Link Status" >> validation_report.md
        
        if [ -n "$INVALID_LINKS" ]; then
          echo "**‚ö†Ô∏è Invalid links found:**" >> validation_report.md
          IFS=',' read -ra links <<< "$INVALID_LINKS"
          for link in "${links[@]}"; do
            if [ -n "$link" ]; then
              echo "- $link" >> validation_report.md
            fi
          done
        else
          echo "‚úÖ All documentation links are valid" >> validation_report.md
        fi

    - name: Determine if update needed
      id: check-updates
      run: |
        update_needed=false
        
        # Check if there are issues that need addressing
        if [ -n "$INACCESSIBLE_REPOS" ] || [ -n "$NEW_REPOS" ] || [ -n "$INVALID_LINKS" ]; then
          update_needed=true
          echo "‚ö†Ô∏è Issues found that require documentation updates"
        fi
        
        # Check if force update was requested
        if [ "${{ inputs.force_update }}" = "true" ]; then
          update_needed=true
          echo "üîÑ Force update requested"
        fi
        
        # Check if there was recent activity
        if [ -n "$ACTIVE_REPOS" ]; then
          update_needed=true
          echo "üî• Recent repository activity detected"
        fi
        
        echo "update_needed=$update_needed" >> $GITHUB_OUTPUT

    - name: Trigger context update
      if: steps.check-updates.outputs.update_needed == 'true'
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: toplocs/toplocs-workspace
        event-type: repository-updated
        client-payload: |
          {
            "repository": "periodic-validation",
            "event_type": "validation",
            "timestamp": "${{ github.run_started_at }}",
            "validation_report": true,
            "new_repos": "${{ env.NEW_REPOS }}",
            "active_repos": "${{ env.ACTIVE_REPOS }}",
            "issues_found": "${{ env.INACCESSIBLE_REPOS }}${{ env.INVALID_LINKS }}"
          }

    - name: Create issue for problems
      if: env.INACCESSIBLE_REPOS != '' || env.INVALID_LINKS != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat > issue_body.md << 'EOF'
        ## üö® Workspace Validation Issues Detected
        
        The periodic validation has detected issues that need attention:
        
        EOF
        
        if [ -n "$INACCESSIBLE_REPOS" ]; then
          echo "### ‚ùå Inaccessible Repositories" >> issue_body.md
          echo "The following repositories are referenced in documentation but not accessible:" >> issue_body.md
          echo "" >> issue_body.md
          IFS=',' read -ra repos <<< "$INACCESSIBLE_REPOS"
          for repo in "${repos[@]}"; do
            if [ -n "$repo" ]; then
              echo "- $repo" >> issue_body.md
            fi
          done
          echo "" >> issue_body.md
        fi
        
        if [ -n "$INVALID_LINKS" ]; then
          echo "### üîó Invalid Documentation Links" >> issue_body.md
          echo "The following repository links in documentation are invalid:" >> issue_body.md
          echo "" >> issue_body.md
          IFS=',' read -ra links <<< "$INVALID_LINKS"
          for link in "${links[@]}"; do
            if [ -n "$link" ]; then
              echo "- $link" >> issue_body.md
            fi
          done
          echo "" >> issue_body.md
        fi
        
        echo "### üîß Recommended Actions" >> issue_body.md
        echo "1. Review repository accessibility and permissions" >> issue_body.md
        echo "2. Update documentation to remove invalid references" >> issue_body.md
        echo "3. Consider if repositories have been renamed or moved" >> issue_body.md
        echo "4. Update the periodic validation workflow if needed" >> issue_body.md
        echo "" >> issue_body.md
        echo "*This issue was automatically created by the periodic validation workflow.*" >> issue_body.md
        
        # Create the issue
        gh issue create \
          --title "üö® Workspace Validation Issues - $(date +%Y-%m-%d)" \
          --body-file issue_body.md \
          --label "automated,documentation,validation"

    - name: Output validation results
      run: |
        echo "üìã Validation Report:"
        cat validation_report.md
        
        if [ "${{ steps.check-updates.outputs.update_needed }}" = "true" ]; then
          echo ""
          echo "üîÑ Context update triggered"
        else
          echo ""
          echo "‚úÖ No updates needed - workspace is current"
        fi