name: "📰 Weekly Blog Generator"

on:
  schedule:
    - cron: '0 9 * * 6'
  workflow_dispatch:
    inputs:
      week_override:
        description: 'Override week period (YYYY-MM-DD to YYYY-MM-DD)'
        required: false
        default: ''
      force_publish:
        description: 'Force publish even if minimal activity detected'
        type: boolean
        default: false

jobs:
  generate-weekly-blog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install GitHub CLI
      run: |
        gh --version || (
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
        )

    - name: Calculate week period
      run: |
        if [ -n "${{ inputs.week_override }}" ]; then
          echo "WEEK_START=$(echo '${{ inputs.week_override }}' | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "WEEK_END=$(echo '${{ inputs.week_override }}' | cut -d' ' -f3)" >> $GITHUB_ENV
        else
          WEEK_END=$(date -u +%Y-%m-%d)
          WEEK_START=$(date -u -d '7 days ago' +%Y-%m-%d)
          echo "WEEK_START=$WEEK_START" >> $GITHUB_ENV
          echo "WEEK_END=$WEEK_END" >> $GITHUB_ENV
        fi
        echo "📅 Analyzing week: $WEEK_START to $WEEK_END"

    - name: Analyze ecosystem activity
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍 Analyzing TopLocs ecosystem activity..."
        
        repositories=(
          "toplocs/toplocs-workspace"
          "toplocs/tribelike"
          "toplocs/locations"
          "toplocs/plugin-dev-sdk"
          "toplocs/link-plugin"
          "toplocs/wiki-plugin"
          "toplocs/location-plugin"
          "toplocs/demo-plugin"
          "toplocs/event-plugin"
          "toplocs/chat-plugin"
        )
        
        total_commits=0
        total_prs=0
        
        echo "## 📊 Weekly Activity Analysis" > weekly_analysis.md
        echo "**Period:** $WEEK_START to $WEEK_END" >> weekly_analysis.md
        echo "" >> weekly_analysis.md
        
        for repo in "${repositories[@]}"; do
          if gh repo view "$repo" &> /dev/null; then
            commits_json=$(gh api "repos/$repo/commits?since=${WEEK_START}T00:00:00Z&until=${WEEK_END}T23:59:59Z" 2>/dev/null || echo "[]")
            commit_count=$(echo "$commits_json" | jq length 2>/dev/null || echo "0")
            
            prs_json=$(gh api "repos/$repo/pulls?state=all&sort=updated&direction=desc" --jq "map(select(.updated_at >= \"${WEEK_START}T00:00:00Z\" and .updated_at <= \"${WEEK_END}T23:59:59Z\"))" 2>/dev/null || echo "[]")
            pr_count=$(echo "$prs_json" | jq length 2>/dev/null || echo "0")
            
            if [ "$commit_count" -gt 0 ] || [ "$pr_count" -gt 0 ]; then
              total_commits=$((total_commits + commit_count))
              total_prs=$((total_prs + pr_count))
              
              echo "### $repo" >> weekly_analysis.md
              echo "- Commits: $commit_count" >> weekly_analysis.md
              echo "- PRs: $pr_count" >> weekly_analysis.md
              echo "" >> weekly_analysis.md
            fi
          fi
        done
        
        contributors=$(gh api "repos/toplocs/tribelike/commits?since=${WEEK_START}T00:00:00Z&until=${WEEK_END}T23:59:59Z" \
          --jq 'map(.author.login // .commit.author.name) | unique | join(", ")' 2>/dev/null || echo "toplocs-team")
        
        echo "TOTAL_COMMITS=$total_commits" >> $GITHUB_ENV
        echo "TOTAL_PRS=$total_prs" >> $GITHUB_ENV
        echo "CONTRIBUTORS=$contributors" >> $GITHUB_ENV
        
        echo "## Summary" >> weekly_analysis.md
        echo "- Total Commits: $total_commits" >> weekly_analysis.md
        echo "- Total PRs: $total_prs" >> weekly_analysis.md
        echo "- Contributors: $contributors" >> weekly_analysis.md
        
        if [ "$total_commits" -gt 5 ] || [ "$total_prs" -gt 2 ] || [ "${{ inputs.force_publish }}" = "true" ]; then
          echo "ACTIVITY_THRESHOLD=true" >> $GITHUB_ENV
          echo "✅ Sufficient activity for blog post"
        else
          echo "ACTIVITY_THRESHOLD=false" >> $GITHUB_ENV
          echo "ℹ️ Low activity week"
        fi

    - name: Generate blog post
      if: env.ACTIVITY_THRESHOLD == 'true'
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🤖 Generating blog post with Claude AI..."
        
        BLOG_DATE=$(date -u +%Y-%m-%d)
        BLOG_SLUG="weekly-update-$(date -u +%Y-%m-%d)"
        
        # Create prompt for Claude
        echo "You are writing a TopLocs weekly development blog post. Based on the activity below, write a comprehensive 800-1200 word blog post celebrating achievements and technical progress." > prompt.txt
        echo "" >> prompt.txt
        echo "Return in this format:" >> prompt.txt
        echo "BLOG_TITLE: [compelling title]" >> prompt.txt
        echo "BLOG_CONTENT:" >> prompt.txt
        echo "[markdown content for Docusaurus blog]" >> prompt.txt
        echo "" >> prompt.txt
        cat weekly_analysis.md >> prompt.txt
        
        # Call Claude API
        echo '{"model":"claude-3-5-sonnet-20241022","max_tokens":4000,"messages":[{"role":"user","content":""}]}' > payload.json
        jq --arg content "$(cat prompt.txt)" '.messages[0].content = $content' payload.json > final_payload.json
        
        # Debug: Check if API key is set
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "❌ ANTHROPIC_API_KEY is not set"
          echo "BLOG_GENERATED=false" >> $GITHUB_ENV
          exit 0
        fi
        
        # Debug: Show payload size
        echo "📦 Payload size: $(wc -c < final_payload.json) bytes"
        
        response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
          -H "Content-Type: application/json" \
          -H "anthropic-version: 2023-06-01" \
          -H "x-api-key: $ANTHROPIC_API_KEY" \
          -d @final_payload.json)
        
        # Debug: Show response
        echo "🔍 API Response status: $(echo "$response" | jq -r 'if .error then "ERROR: " + .error.message else "OK" end' 2>/dev/null || echo "PARSE_ERROR")"
        
        # Debug: Show full response structure (first 500 chars)
        echo "📋 Full response preview:"
        echo "$response" | head -c 500
        echo ""
        
        claude_content=$(echo "$response" | jq -r '.content[0].text' 2>/dev/null || echo "")
        
        # Debug: Show content extraction result
        echo "📝 Content extracted: $(echo "$claude_content" | wc -c) characters"
        
        # Debug: Show first 200 chars of extracted content
        if [ -n "$claude_content" ] && [ "$claude_content" != "null" ]; then
          echo "📖 Content preview:"
          echo "$claude_content" | head -c 200
          echo "..."
        fi
        
        if [ -n "$claude_content" ] && [ "$claude_content" != "null" ] && [ "$claude_content" != "" ]; then
          echo "✅ Blog post generated"
          echo "$claude_content" > blog_response.txt
          
          blog_title=$(echo "$claude_content" | grep "BLOG_TITLE:" | sed 's/BLOG_TITLE: //')
          blog_content=$(echo "$claude_content" | sed '/BLOG_CONTENT:/,$!d' | sed '1d')
          
          echo "BLOG_GENERATED=true" >> $GITHUB_ENV
          echo "BLOG_TITLE=$blog_title" >> $GITHUB_ENV
          echo "BLOG_DATE=$BLOG_DATE" >> $GITHUB_ENV
          echo "BLOG_SLUG=$BLOG_SLUG" >> $GITHUB_ENV
          
          echo "$blog_content" > blog_content.md
        else
          echo "❌ Failed to generate blog post"
          echo "BLOG_GENERATED=false" >> $GITHUB_ENV
        fi

    - name: Create blog file
      if: env.BLOG_GENERATED == 'true'
      run: |
        echo "📝 Creating blog file..."
        
        mkdir -p docusaurus/blog
        BLOG_FILE="docusaurus/blog/${BLOG_DATE}-${BLOG_SLUG}.md"
        
        # Create authors YAML
        if [ -n "$CONTRIBUTORS" ] && [ "$CONTRIBUTORS" != "" ]; then
          authors_yaml=$(echo "$CONTRIBUTORS" | sed 's/, */\n  - /g' | sed '1s/^/  - /')
        else
          authors_yaml="  - toplocs-team"
        fi
        
        # Create blog post
        echo "---" > "$BLOG_FILE"
        echo "slug: ${BLOG_SLUG}" >> "$BLOG_FILE"
        echo "title: ${BLOG_TITLE}" >> "$BLOG_FILE"
        echo "authors:" >> "$BLOG_FILE"
        echo "${authors_yaml}" >> "$BLOG_FILE"
        echo "tags: [weekly-update, development, ecosystem]" >> "$BLOG_FILE"
        echo "date: ${BLOG_DATE}T09:00" >> "$BLOG_FILE"
        echo "---" >> "$BLOG_FILE"
        echo "" >> "$BLOG_FILE"
        cat blog_content.md >> "$BLOG_FILE"
        
        echo "BLOG_FILE=$BLOG_FILE" >> $GITHUB_ENV

    - name: Create PR
      if: env.BLOG_GENERATED == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        PR_BRANCH="weekly-blog-$(date -u +%Y-%m-%d)"
        git checkout -b "$PR_BRANCH"
        
        git add "$BLOG_FILE"
        
        if ! git diff --staged --quiet; then
          echo "# 📰 Weekly Blog Post" > pr_body.md
          echo "" >> pr_body.md
          echo "**Period:** $WEEK_START to $WEEK_END" >> pr_body.md
          echo "**Activity:** $TOTAL_COMMITS commits, $TOTAL_PRS PRs" >> pr_body.md
          echo "**Contributors:** $CONTRIBUTORS" >> pr_body.md
          echo "" >> pr_body.md
          echo "Automatically generated weekly development blog post." >> pr_body.md
          
          git commit -m "📰 Add weekly blog post: $BLOG_TITLE" \
            -m "🤖 Generated with Claude Code" \
            -m "Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin "$PR_BRANCH"
          
          gh pr create \
            --title "📰 Weekly Blog: $BLOG_TITLE" \
            --body-file pr_body.md \
            --base main \
            --head "$PR_BRANCH"
          
          echo "✅ PR created successfully"
        fi

    - name: Cleanup
      if: always()
      run: |
        rm -f prompt.txt payload.json final_payload.json blog_response.txt blog_content.md weekly_analysis.md pr_body.md

    - name: Output results
      run: |
        if [ "$BLOG_GENERATED" = "true" ]; then
          echo "✅ Weekly blog post generated"
          echo "📰 Title: $BLOG_TITLE"
        elif [ "$ACTIVITY_THRESHOLD" = "false" ]; then
          echo "ℹ️ Low activity week - no blog generated"
        else
          echo "❌ Blog generation failed"
        fi