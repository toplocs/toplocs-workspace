name: AI-Powered Ecosystem Sync

on:
  # Run automatically every night at 3 AM UTC
  schedule:
    - cron: '0 3 * * *'
  
  # Allow manual triggering with options
  workflow_dispatch:
    inputs:
      repositories:
        description: 'Comma-separated list of repositories to check (leave empty for all)'
        required: false
        default: ''
      force_update:
        description: 'Force update even if no significant changes detected'
        type: boolean
        default: false

jobs:
  sync-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
      
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install GitHub CLI
      run: |
        gh --version || (
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
        )

    - name: Analyze repositories for changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Analyzing TopLocs repositories for recent changes..."
        
        # Define repositories to check
        if [ -n "${{ inputs.repositories }}" ]; then
          IFS=',' read -ra REPO_LIST <<< "${{ inputs.repositories }}"
          repositories=()
          for repo in "${REPO_LIST[@]}"; do
            repositories+=("toplocs/$(echo $repo | xargs)")
          done
        else
          repositories=(
            "toplocs/tribelike"
            "toplocs/locations"
            "toplocs/event-plugin"
            "toplocs/wiki-plugin"
            "toplocs/location-plugin"
            "toplocs/link-plugin"
            "toplocs/demo-plugin"
            "toplocs/plugin-dev-sdk"
            "toplocs/tribelike.wiki"
          )
        fi
        
        # Check for recent activity
        has_changes=false
        repo_summary=""
        
        for repo in "${repositories[@]}"; do
          if gh repo view "$repo" &> /dev/null; then
            # Get recent commits (last 30 days)
            recent_commits=$(gh api "repos/$repo/commits" \
              --jq 'map(select(.commit.author.date > (now - 30*24*3600 | strftime("%Y-%m-%dT%H:%M:%SZ")))) | length' \
              2>/dev/null || echo "0")
            
            if [ "$recent_commits" -gt 0 ]; then
              has_changes=true
              latest_commit=$(gh api "repos/$repo/commits" --jq '.[0].commit.message' 2>/dev/null || echo "No recent commits")
              repo_summary="$repo_summary- **$repo**: $recent_commits commits (latest: ${latest_commit:0:60}...)\n"
            fi
          fi
        done
        
        # Set output for next steps
        if [ "$has_changes" = true ] || [ "${{ inputs.force_update }}" = "true" ]; then
          echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          echo "REPO_SUMMARY<<EOF" >> $GITHUB_ENV
          echo -e "$repo_summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üåô Nightly sync: Recent activity detected, proceeding with documentation updates"
          else
            echo "üîÑ Update needed: Recent activity detected or force update requested"
          fi
        else
          echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üò¥ Nightly sync: No significant changes detected"
          else
            echo "‚úÖ No significant changes detected"
          fi
        fi

    - name: Generate AI documentation updates
      if: env.UPDATE_NEEDED == 'true'
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "ü§ñ Generating focused documentation updates with Claude AI..."
        
        # Create a focused prompt for Claude
        cat > ai_prompt.txt << 'EOF'
        You are maintaining documentation for the TopLocs P2P platform ecosystem. Based on the repository activity below, provide ONLY the specific text changes needed for these files:

        1. CLAUDE.md - Update if repository structure or setup process changed
        2. README.md - Update if main workflow or architecture changed  
        3. docs/project/ecosystem.md - Update if new repositories were added or relationships changed

        Repository Activity:
        EOF
        
        echo "$REPO_SUMMARY" >> ai_prompt.txt
        
        cat >> ai_prompt.txt << 'EOF'
        
        Current Documentation State:
        
        === CLAUDE.md ===
        EOF
        
        cat CLAUDE.md >> ai_prompt.txt
        
        cat >> ai_prompt.txt << 'EOF'
        
        === README.md ===
        EOF
        
        cat README.md >> ai_prompt.txt
        
        cat >> ai_prompt.txt << 'EOF'
        
        === docs/project/ecosystem.md ===
        EOF
        
        cat docs/project/ecosystem.md >> ai_prompt.txt
        
        cat >> ai_prompt.txt << 'EOF'
        
        RESPOND ONLY WITH:
        1. "NO_CHANGES" if no documentation updates are needed
        2. Or specific file updates in this format:
        
        FILE: CLAUDE.md
        [complete updated file content]
        
        FILE: README.md  
        [complete updated file content]
        
        FILE: docs/project/ecosystem.md
        [complete updated file content]
        
        Only include files that actually need changes. Be concise and focus on real improvements.
        EOF
        
        # Call Claude API
        response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
          -H "Content-Type: application/json" \
          -H "x-api-version: 2023-06-01" \
          -H "Authorization: Bearer $ANTHROPIC_API_KEY" \
          -d '{
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 4000,
            "messages": [
              {
                "role": "user",
                "content": "'$(cat ai_prompt.txt | sed 's/"/\\"/g' | tr '\n' ' ')'"
              }
            ]
          }')
        
        echo "$response" > ai_response.json
        
        # Extract Claude's response
        claude_content=$(echo "$response" | jq -r '.content[0].text' 2>/dev/null || echo "")
        
        if [ -n "$claude_content" ] && [ "$claude_content" != "null" ] && [ "$claude_content" != "NO_CHANGES" ]; then
          echo "AI_UPDATES=true" >> $GITHUB_ENV
          echo "$claude_content" > ai_updates.txt
          echo "‚úÖ Claude provided documentation updates"
        else
          echo "AI_UPDATES=false" >> $GITHUB_ENV
          echo "‚ÑπÔ∏è Claude determined no documentation updates needed"
        fi

    - name: Apply documentation updates
      if: env.UPDATE_NEEDED == 'true' && env.AI_UPDATES == 'true'
      run: |
        echo "üìù Applying Claude's documentation updates..."
        
        # Parse and apply file updates
        python3 << 'PYTHON_SCRIPT'
        import re
        import os
        
        try:
            with open('ai_updates.txt', 'r') as f:
                content = f.read()
            
            # Extract file updates
            file_pattern = r'FILE: ([^\n]+)\n(.*?)(?=\nFILE: |$)'
            matches = re.findall(file_pattern, content, re.DOTALL)
            
            files_updated = []
            for file_path, file_content in matches:
                file_path = file_path.strip()
                file_content = file_content.strip()
                
                # Only update if content is substantial
                if len(file_content) > 10:
                    with open(file_path, 'w') as f:
                        f.write(file_content)
                    files_updated.append(file_path)
                    print(f"‚úÖ Updated {file_path}")
            
            # Save list of updated files
            with open('files_updated.txt', 'w') as f:
                f.write('\n'.join(files_updated))
                
        except Exception as e:
            print(f"‚ùå Error applying updates: {e}")
            exit(1)
        PYTHON_SCRIPT

    - name: Clean up temporary files
      if: always()
      run: |
        # Remove all temporary files
        rm -f ai_prompt.txt ai_response.json ai_updates.txt

    - name: Check for actual changes
      id: check-changes
      run: |
        git add docs/ CLAUDE.md README.md
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No actual documentation changes made"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Documentation changes detected"
        fi

    - name: Create Pull Request
      if: steps.check-changes.outputs.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and switch to PR branch
        PR_BRANCH="docs-sync-${{ github.run_id }}"
        git checkout -b "$PR_BRANCH"
        
        # Get list of updated files
        if [ -f "files_updated.txt" ]; then
          updated_files=$(cat files_updated.txt | tr '\n' ' ')
        else
          updated_files="documentation files"
        fi
        
        # Create focused PR body
        if [ "${{ github.event_name }}" = "schedule" ]; then
          PR_TITLE="üåô Nightly Documentation Sync - ${{ github.run_id }}"
          cat > pr_body.md << EOF
# üåô Nightly Documentation Sync

AI-powered documentation updates based on recent repository activity.

## üìã Repository Activity
$REPO_SUMMARY

## üìù Updated Files
- $updated_files

## ü§ñ AI Process
Claude AI analyzed recent changes and updated documentation to keep it current with the ecosystem.

*Automated nightly sync at 3 AM UTC*
EOF
        else
          PR_TITLE="ü§ñ AI Documentation Sync - ${{ github.run_id }}"
          cat > pr_body.md << EOF
# ü§ñ AI Documentation Sync

AI-powered documentation updates based on repository analysis.

## üìã Repository Activity  
$REPO_SUMMARY

## üìù Updated Files
- $updated_files

## ü§ñ AI Process
Claude AI analyzed changes and updated documentation accordingly.

*Manual sync requested*
EOF
        fi
        
        # Commit changes
        git add docs/ CLAUDE.md README.md
        git commit -m "$(cat <<EOF
        $PR_TITLE
        
        AI-powered documentation updates based on recent ecosystem activity.
        
        Updated: $updated_files
        
        ü§ñ Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>
        EOF
        )"
        
        # Push branch and create PR
        git push origin "$PR_BRANCH"
        
        gh pr create \
          --title "$PR_TITLE" \
          --body-file pr_body.md \
          --base main \
          --head "$PR_BRANCH"
        
        echo "‚úÖ Pull request created successfully"
        
        # Clean up PR body file
        rm -f pr_body.md files_updated.txt

    - name: Output results
      run: |
        if [ "${{ steps.check-changes.outputs.changes }}" = "true" ]; then
          echo "‚úÖ Documentation sync completed with updates"
        elif [ "$UPDATE_NEEDED" = "true" ]; then
          echo "‚ÑπÔ∏è AI analysis completed - no documentation changes needed"
        else
          echo "üò¥ No repository activity detected - documentation stays current"
        fi
